// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2002/6/2 ¤U¤È 10:15:26 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Paul\CBuilder6\Example\Charp11\Project11_1.tlb (1)
// LIBID: {D2B43C2F-84E2-4A7F-B117-404C2D8FEE9C}
// LCID: 0
// Helpfile: 
// HelpString: Project11_1 Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
//   (2) v1.0 Midas, (C:\WINNT\System32\midas.dll)
//   (3) v4.0 StdVCL, (C:\WINNT\System32\STDVCL40.DLL)
// ************************************************************************ //
#ifndef   Project11_1_TLBH
#define   Project11_1_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include "databkr.hpp"

using Midas::IAppServer;

// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Project11_1_tlb
{

// *********************************************************************//
// HelpString: Project11_1 Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_Project11_1 = {0xD2B43C2F, 0x84E2, 0x4A7F,{ 0xB1, 0x17, 0x40,0x4C, 0x2D, 0x8F,0xEE, 0x9C} };
extern "C" const __declspec(selectany) GUID IID_ITest111Server = {0x1CADEF51, 0x2718, 0x42BA,{ 0xB4, 0xED, 0x38,0x08, 0x4E, 0x3B,0x05, 0xDD} };
extern "C" const __declspec(selectany) GUID CLSID_Test111Server = {0x9E316843, 0xB52B, 0x4B93,{ 0xAC, 0x12, 0xD9,0x57, 0xCE, 0x3C,0x84, 0xB1} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{1CADEF51-2718-42BA-B4ED-38084E3B05DD}") ITest111Server;
typedef TComInterface<ITest111Server, &IID_ITest111Server> ITest111ServerPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//

#define LIBID_OF_Test111Server (&LIBID_Project11_1)
// *********************************************************************//
// Interface: ITest111Server
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1CADEF51-2718-42BA-B4ED-38084E3B05DD}
// *********************************************************************//
interface ITest111Server  : public IAppServer
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMITest111Server
// Interface: ITest111Server
// *********************************************************************//
template <class T /* ITest111Server */ >
class TCOMITest111ServerT : public TComInterface<ITest111Server>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMITest111ServerT() {}
  TCOMITest111ServerT(ITest111Server *intf, bool addRef = false) : TComInterface<ITest111Server>(intf, addRef) {}
  TCOMITest111ServerT(const TCOMITest111ServerT& src) : TComInterface<ITest111Server>(src) {}
  TCOMITest111ServerT& operator=(const TCOMITest111ServerT& src) { Bind(src, true); return *this;}


};
typedef TCOMITest111ServerT<ITest111Server> TCOMITest111Server;

// *********************************************************************//
// DispIntf:  ITest111Server
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1CADEF51-2718-42BA-B4ED-38084E3B05DD}
// *********************************************************************//
template<class T>
class ITest111ServerDispT : public TAutoDriver<ITest111Server>
{
public:
  ITest111ServerDispT(){}

  ITest111ServerDispT(ITest111Server *pintf)
  {
    TAutoDriver<ITest111Server>::Bind(pintf, false);
  }

  ITest111ServerDispT(ITest111ServerPtr pintf)
  {
    TAutoDriver<ITest111Server>::Bind(pintf, true);
  }

  ITest111ServerDispT& operator=(ITest111Server *pintf)
  {
    TAutoDriver<ITest111Server>::Bind(pintf, false);
    return *this;
  }

  ITest111ServerDispT& operator=(ITest111ServerPtr pintf)
  {
    TAutoDriver<ITest111Server>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Test111Server));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Test111Server);
  }

  HRESULT         __fastcall AS_ApplyUpdates(BSTR ProviderName/*[in]*/, VARIANT Delta/*[in]*/, 
                                             long MaxErrors/*[in]*/, long* ErrorCount/*[out]*/, 
                                             VARIANT* OwnerData/*[in,out]*/, 
                                             VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_ApplyUpdates(BSTR ProviderName/*[in]*/, VARIANT Delta/*[in]*/, 
                                             long MaxErrors/*[in]*/, long* ErrorCount/*[out]*/, 
                                             VARIANT* OwnerData/*[in,out]*/);
  HRESULT         __fastcall AS_GetRecords(BSTR ProviderName/*[in]*/, long Count/*[in]*/, 
                                           long* RecsOut/*[out]*/, long Options/*[in]*/, 
                                           BSTR CommandText/*[in]*/, VARIANT* Params/*[in,out]*/, 
                                           VARIANT* OwnerData/*[in,out]*/, 
                                           VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_GetRecords(BSTR ProviderName/*[in]*/, long Count/*[in]*/, 
                                           long* RecsOut/*[out]*/, long Options/*[in]*/, 
                                           BSTR CommandText/*[in]*/, VARIANT* Params/*[in,out]*/, 
                                           VARIANT* OwnerData/*[in,out]*/);
  HRESULT         __fastcall AS_DataRequest(BSTR ProviderName/*[in]*/, VARIANT Data/*[in]*/, 
                                            VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_DataRequest(BSTR ProviderName/*[in]*/, VARIANT Data/*[in]*/);
  HRESULT         __fastcall AS_GetProviderNames(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_GetProviderNames(void);
  HRESULT         __fastcall AS_GetParams(BSTR ProviderName/*[in]*/, VARIANT* OwnerData/*[in,out]*/
                                          , VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_GetParams(BSTR ProviderName/*[in]*/, VARIANT* OwnerData/*[in,out]*/);
  HRESULT         __fastcall AS_RowRequest(BSTR ProviderName/*[in]*/, VARIANT Row/*[in]*/, 
                                           long RequestType/*[in]*/, VARIANT* OwnerData/*[in,out]*/
                                           , VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_RowRequest(BSTR ProviderName/*[in]*/, VARIANT Row/*[in]*/, 
                                           long RequestType/*[in]*/, VARIANT* OwnerData/*[in,out]*/);
  HRESULT         __fastcall AS_Execute(BSTR ProviderName/*[in]*/, BSTR CommandText/*[in]*/, 
                                        VARIANT* Params/*[in,out]*/, VARIANT* OwnerData/*[in,out]*/);


};
typedef ITest111ServerDispT<ITest111Server> ITest111ServerDisp;

// *********************************************************************//
// SmartIntf: TCOMITest111Server
// Interface: ITest111Server
// *********************************************************************//
// *********************************************************************//
// DispIntf:  ITest111Server
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1CADEF51-2718-42BA-B4ED-38084E3B05DD}
// *********************************************************************//
template <class T> HRESULT __fastcall
ITest111ServerDispT<T>::AS_ApplyUpdates(BSTR ProviderName/*[in]*/, VARIANT Delta/*[in]*/, 
                                        long MaxErrors/*[in]*/, long* ErrorCount/*[out]*/, 
                                        VARIANT* OwnerData/*[in,out]*/, 
                                        VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_ApplyUpdates"), DISPID(20000000));
  TAutoArgs<5> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = Delta /*[VT_VARIANT:0]*/;
  _args[3] = MaxErrors /*[VT_I4:0]*/;
  _args[4] = ErrorCount /*[VT_I4:1]*/;
  _args[5] = OwnerData /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITest111ServerDispT<T>::AS_ApplyUpdates(BSTR ProviderName/*[in]*/, VARIANT Delta/*[in]*/, 
                                        long MaxErrors/*[in]*/, long* ErrorCount/*[out]*/, 
                                        VARIANT* OwnerData/*[in,out]*/)
{
  VARIANT Value;
  this->AS_ApplyUpdates(ProviderName, Delta, MaxErrors, ErrorCount, OwnerData, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ITest111ServerDispT<T>::AS_GetRecords(BSTR ProviderName/*[in]*/, long Count/*[in]*/, 
                                      long* RecsOut/*[out]*/, long Options/*[in]*/, 
                                      BSTR CommandText/*[in]*/, VARIANT* Params/*[in,out]*/, 
                                      VARIANT* OwnerData/*[in,out]*/, VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_GetRecords"), DISPID(20000001));
  TAutoArgs<7> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = Count /*[VT_I4:0]*/;
  _args[3] = RecsOut /*[VT_I4:1]*/;
  _args[4] = Options /*[VT_I4:0]*/;
  _args[5] = CommandText /*[VT_BSTR:0]*/;
  _args[6] = Params /*[VT_VARIANT:1]*/;
  _args[7] = OwnerData /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITest111ServerDispT<T>::AS_GetRecords(BSTR ProviderName/*[in]*/, long Count/*[in]*/, 
                                      long* RecsOut/*[out]*/, long Options/*[in]*/, 
                                      BSTR CommandText/*[in]*/, VARIANT* Params/*[in,out]*/, 
                                      VARIANT* OwnerData/*[in,out]*/)
{
  VARIANT Value;
  this->AS_GetRecords(ProviderName, Count, RecsOut, Options, CommandText, Params, OwnerData, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ITest111ServerDispT<T>::AS_DataRequest(BSTR ProviderName/*[in]*/, VARIANT Data/*[in]*/, 
                                       VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_DataRequest"), DISPID(20000002));
  TAutoArgs<2> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = Data /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITest111ServerDispT<T>::AS_DataRequest(BSTR ProviderName/*[in]*/, VARIANT Data/*[in]*/)
{
  VARIANT Value;
  this->AS_DataRequest(ProviderName, Data, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ITest111ServerDispT<T>::AS_GetProviderNames(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_GetProviderNames"), DISPID(20000003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITest111ServerDispT<T>::AS_GetProviderNames(void)
{
  VARIANT Value;
  this->AS_GetProviderNames((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ITest111ServerDispT<T>::AS_GetParams(BSTR ProviderName/*[in]*/, VARIANT* OwnerData/*[in,out]*/, 
                                     VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_GetParams"), DISPID(20000004));
  TAutoArgs<2> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = OwnerData /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITest111ServerDispT<T>::AS_GetParams(BSTR ProviderName/*[in]*/, VARIANT* OwnerData/*[in,out]*/)
{
  VARIANT Value;
  this->AS_GetParams(ProviderName, OwnerData, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ITest111ServerDispT<T>::AS_RowRequest(BSTR ProviderName/*[in]*/, VARIANT Row/*[in]*/, 
                                      long RequestType/*[in]*/, VARIANT* OwnerData/*[in,out]*/, 
                                      VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_RowRequest"), DISPID(20000005));
  TAutoArgs<4> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = Row /*[VT_VARIANT:0]*/;
  _args[3] = RequestType /*[VT_I4:0]*/;
  _args[4] = OwnerData /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITest111ServerDispT<T>::AS_RowRequest(BSTR ProviderName/*[in]*/, VARIANT Row/*[in]*/, 
                                      long RequestType/*[in]*/, VARIANT* OwnerData/*[in,out]*/)
{
  VARIANT Value;
  this->AS_RowRequest(ProviderName, Row, RequestType, OwnerData, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ITest111ServerDispT<T>::AS_Execute(BSTR ProviderName/*[in]*/, BSTR CommandText/*[in]*/, 
                                   VARIANT* Params/*[in,out]*/, VARIANT* OwnerData/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_Execute"), DISPID(20000006));
  TAutoArgs<4> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = CommandText /*[VT_BSTR:0]*/;
  _args[3] = Params /*[VT_VARIANT:1]*/;
  _args[4] = OwnerData /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Test111Server
// Interface: TCOMITest111Server
// *********************************************************************//
typedef TCoClassCreatorT<TCOMITest111Server, ITest111Server, &CLSID_Test111Server, &IID_ITest111Server> CoTest111Server;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Project11_1_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Project11_1_tlb;
#endif

#pragma option pop

#endif // Project11_1_TLBH
