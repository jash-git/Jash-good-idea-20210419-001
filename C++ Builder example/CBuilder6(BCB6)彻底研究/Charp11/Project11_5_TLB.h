// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2002-11-20 17:29:25 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\CBuilder6Example\Charp11\Project11_5.tlb (1)
// LIBID: {167DDB5E-6123-4801-B695-51666DA8289A}
// LCID: 0
// Helpfile: 
// HelpString: Project11_5 Library
// DepndLst: 
//   (1) v1.0 Midas, (D:\WINNT\System32\midas.dll)
//   (2) v2.0 stdole, (D:\WINNT\System32\stdole2.tlb)
// ************************************************************************ //
#ifndef   Project11_5_TLBH
#define   Project11_5_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include "databkr.hpp"

using Midas::IAppServer;

// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Project11_5_tlb
{

// *********************************************************************//
// HelpString: Project11_5 Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_Project11_5 = {0x167DDB5E, 0x6123, 0x4801,{ 0xB6, 0x95, 0x51,0x66, 0x6D, 0xA8,0x28, 0x9A} };
extern "C" const __declspec(selectany) GUID IID_ITest115Server = {0x86912837, 0x7A19, 0x4F23,{ 0x9E, 0xF9, 0x5D,0x1E, 0x98, 0x3A,0xCF, 0xE2} };
extern "C" const __declspec(selectany) GUID CLSID_Test115Server = {0x0924B7AB, 0x668E, 0x4E0C,{ 0x82, 0x42, 0xA7,0x28, 0x2A, 0x56,0xCA, 0x31} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{86912837-7A19-4F23-9EF9-5D1E983ACFE2}") ITest115Server;
typedef TComInterface<ITest115Server, &IID_ITest115Server> ITest115ServerPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//

#define LIBID_OF_Test115Server (&LIBID_Project11_5)
// *********************************************************************//
// Interface: ITest115Server
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {86912837-7A19-4F23-9EF9-5D1E983ACFE2}
// *********************************************************************//
interface ITest115Server  : public IAppServer
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetDatabaseNames(BSTR* Ret/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE SetDatabaseName(BSTR DBName/*[in]*/, BSTR Password/*[in]*/, 
                                                    BSTR* Ret/*[out,retval]*/) = 0; // [2]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall GetDatabaseNames(void)
  {
    BSTR Ret = 0;
    OLECHECK(this->GetDatabaseNames((BSTR*)&Ret));
    return Ret;
  }

  BSTR __fastcall SetDatabaseName(BSTR DBName/*[in]*/, BSTR Password/*[in]*/)
  {
    BSTR Ret = 0;
    OLECHECK(this->SetDatabaseName(DBName, Password, (BSTR*)&Ret));
    return Ret;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMITest115Server
// Interface: ITest115Server
// *********************************************************************//
template <class T /* ITest115Server */ >
class TCOMITest115ServerT : public TComInterface<ITest115Server>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMITest115ServerT() {}
  TCOMITest115ServerT(ITest115Server *intf, bool addRef = false) : TComInterface<ITest115Server>(intf, addRef) {}
  TCOMITest115ServerT(const TCOMITest115ServerT& src) : TComInterface<ITest115Server>(src) {}
  TCOMITest115ServerT& operator=(const TCOMITest115ServerT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall GetDatabaseNames(BSTR* Ret/*[out,retval]*/);
  BSTR            __fastcall GetDatabaseNames(void);
  HRESULT         __fastcall SetDatabaseName(BSTR DBName/*[in]*/, BSTR Password/*[in]*/, 
                                             BSTR* Ret/*[out,retval]*/);
  BSTR            __fastcall SetDatabaseName(BSTR DBName/*[in]*/, BSTR Password/*[in]*/);

};
typedef TCOMITest115ServerT<ITest115Server> TCOMITest115Server;

// *********************************************************************//
// DispIntf:  ITest115Server
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {86912837-7A19-4F23-9EF9-5D1E983ACFE2}
// *********************************************************************//
template<class T>
class ITest115ServerDispT : public TAutoDriver<ITest115Server>
{
public:
  ITest115ServerDispT(){}

  ITest115ServerDispT(ITest115Server *pintf)
  {
    TAutoDriver<ITest115Server>::Bind(pintf, false);
  }

  ITest115ServerDispT(ITest115ServerPtr pintf)
  {
    TAutoDriver<ITest115Server>::Bind(pintf, true);
  }

  ITest115ServerDispT& operator=(ITest115Server *pintf)
  {
    TAutoDriver<ITest115Server>::Bind(pintf, false);
    return *this;
  }

  ITest115ServerDispT& operator=(ITest115ServerPtr pintf)
  {
    TAutoDriver<ITest115Server>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Test115Server));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Test115Server);
  }

  HRESULT         __fastcall GetDatabaseNames(BSTR* Ret/*[out,retval]*/);
  BSTR            __fastcall GetDatabaseNames(void);
  HRESULT         __fastcall SetDatabaseName(BSTR DBName/*[in]*/, BSTR Password/*[in]*/, 
                                             BSTR* Ret/*[out,retval]*/);
  BSTR            __fastcall SetDatabaseName(BSTR DBName/*[in]*/, BSTR Password/*[in]*/);
  HRESULT         __fastcall AS_ApplyUpdates(BSTR ProviderName/*[in]*/, VARIANT Delta/*[in]*/, 
                                             long MaxErrors/*[in]*/, long* ErrorCount/*[out]*/, 
                                             VARIANT* OwnerData/*[in,out]*/, 
                                             VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_ApplyUpdates(BSTR ProviderName/*[in]*/, VARIANT Delta/*[in]*/, 
                                             long MaxErrors/*[in]*/, long* ErrorCount/*[out]*/, 
                                             VARIANT* OwnerData/*[in,out]*/);
  HRESULT         __fastcall AS_GetRecords(BSTR ProviderName/*[in]*/, long Count/*[in]*/, 
                                           long* RecsOut/*[out]*/, long Options/*[in]*/, 
                                           BSTR CommandText/*[in]*/, VARIANT* Params/*[in,out]*/, 
                                           VARIANT* OwnerData/*[in,out]*/, 
                                           VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_GetRecords(BSTR ProviderName/*[in]*/, long Count/*[in]*/, 
                                           long* RecsOut/*[out]*/, long Options/*[in]*/, 
                                           BSTR CommandText/*[in]*/, VARIANT* Params/*[in,out]*/, 
                                           VARIANT* OwnerData/*[in,out]*/);
  HRESULT         __fastcall AS_DataRequest(BSTR ProviderName/*[in]*/, VARIANT Data/*[in]*/, 
                                            VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_DataRequest(BSTR ProviderName/*[in]*/, VARIANT Data/*[in]*/);
  HRESULT         __fastcall AS_GetProviderNames(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_GetProviderNames(void);
  HRESULT         __fastcall AS_GetParams(BSTR ProviderName/*[in]*/, VARIANT* OwnerData/*[in,out]*/
                                          , VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_GetParams(BSTR ProviderName/*[in]*/, VARIANT* OwnerData/*[in,out]*/);
  HRESULT         __fastcall AS_RowRequest(BSTR ProviderName/*[in]*/, VARIANT Row/*[in]*/, 
                                           long RequestType/*[in]*/, VARIANT* OwnerData/*[in,out]*/
                                           , VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_RowRequest(BSTR ProviderName/*[in]*/, VARIANT Row/*[in]*/, 
                                           long RequestType/*[in]*/, VARIANT* OwnerData/*[in,out]*/);
  HRESULT         __fastcall AS_Execute(BSTR ProviderName/*[in]*/, BSTR CommandText/*[in]*/, 
                                        VARIANT* Params/*[in,out]*/, VARIANT* OwnerData/*[in,out]*/);


};
typedef ITest115ServerDispT<ITest115Server> ITest115ServerDisp;

// *********************************************************************//
// SmartIntf: TCOMITest115Server
// Interface: ITest115Server
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMITest115ServerT<T>::GetDatabaseNames(BSTR* Ret/*[out,retval]*/)
{
  return (*this)->GetDatabaseNames(Ret);
}

template <class T> BSTR __fastcall
TCOMITest115ServerT<T>::GetDatabaseNames(void)
{
  BSTR Ret = 0;
  OLECHECK(this->GetDatabaseNames((BSTR*)&Ret));
  return Ret;
}

template <class T> HRESULT __fastcall
TCOMITest115ServerT<T>::SetDatabaseName(BSTR DBName/*[in]*/, BSTR Password/*[in]*/, 
                                        BSTR* Ret/*[out,retval]*/)
{
  return (*this)->SetDatabaseName(DBName, Password, Ret);
}

template <class T> BSTR __fastcall
TCOMITest115ServerT<T>::SetDatabaseName(BSTR DBName/*[in]*/, BSTR Password/*[in]*/)
{
  BSTR Ret = 0;
  OLECHECK(this->SetDatabaseName(, (BSTR*)&Ret));
  return Ret;
}

// *********************************************************************//
// DispIntf:  ITest115Server
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {86912837-7A19-4F23-9EF9-5D1E983ACFE2}
// *********************************************************************//
template <class T> HRESULT __fastcall
ITest115ServerDispT<T>::GetDatabaseNames(BSTR* Ret/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDatabaseNames"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Ret /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ITest115ServerDispT<T>::GetDatabaseNames(void)
{
  BSTR Ret;
  this->GetDatabaseNames((BSTR*)&Ret);
  return Ret;
}

template <class T> HRESULT __fastcall
ITest115ServerDispT<T>::SetDatabaseName(BSTR DBName/*[in]*/, BSTR Password/*[in]*/, 
                                        BSTR* Ret/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDatabaseName"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = DBName /*[VT_BSTR:0]*/;
  _args[2] = Password /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Ret /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ITest115ServerDispT<T>::SetDatabaseName(BSTR DBName/*[in]*/, BSTR Password/*[in]*/)
{
  BSTR Ret;
  this->SetDatabaseName(DBName, Password, (BSTR*)&Ret);
  return Ret;
}

template <class T> HRESULT __fastcall
ITest115ServerDispT<T>::AS_ApplyUpdates(BSTR ProviderName/*[in]*/, VARIANT Delta/*[in]*/, 
                                        long MaxErrors/*[in]*/, long* ErrorCount/*[out]*/, 
                                        VARIANT* OwnerData/*[in,out]*/, 
                                        VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_ApplyUpdates"), DISPID(20000000));
  TAutoArgs<5> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = Delta /*[VT_VARIANT:0]*/;
  _args[3] = MaxErrors /*[VT_I4:0]*/;
  _args[4] = ErrorCount /*[VT_I4:1]*/;
  _args[5] = OwnerData /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITest115ServerDispT<T>::AS_ApplyUpdates(BSTR ProviderName/*[in]*/, VARIANT Delta/*[in]*/, 
                                        long MaxErrors/*[in]*/, long* ErrorCount/*[out]*/, 
                                        VARIANT* OwnerData/*[in,out]*/)
{
  VARIANT Value;
  this->AS_ApplyUpdates(ProviderName, Delta, MaxErrors, ErrorCount, OwnerData, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ITest115ServerDispT<T>::AS_GetRecords(BSTR ProviderName/*[in]*/, long Count/*[in]*/, 
                                      long* RecsOut/*[out]*/, long Options/*[in]*/, 
                                      BSTR CommandText/*[in]*/, VARIANT* Params/*[in,out]*/, 
                                      VARIANT* OwnerData/*[in,out]*/, VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_GetRecords"), DISPID(20000001));
  TAutoArgs<7> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = Count /*[VT_I4:0]*/;
  _args[3] = RecsOut /*[VT_I4:1]*/;
  _args[4] = Options /*[VT_I4:0]*/;
  _args[5] = CommandText /*[VT_BSTR:0]*/;
  _args[6] = Params /*[VT_VARIANT:1]*/;
  _args[7] = OwnerData /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITest115ServerDispT<T>::AS_GetRecords(BSTR ProviderName/*[in]*/, long Count/*[in]*/, 
                                      long* RecsOut/*[out]*/, long Options/*[in]*/, 
                                      BSTR CommandText/*[in]*/, VARIANT* Params/*[in,out]*/, 
                                      VARIANT* OwnerData/*[in,out]*/)
{
  VARIANT Value;
  this->AS_GetRecords(ProviderName, Count, RecsOut, Options, CommandText, Params, OwnerData, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ITest115ServerDispT<T>::AS_DataRequest(BSTR ProviderName/*[in]*/, VARIANT Data/*[in]*/, 
                                       VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_DataRequest"), DISPID(20000002));
  TAutoArgs<2> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = Data /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITest115ServerDispT<T>::AS_DataRequest(BSTR ProviderName/*[in]*/, VARIANT Data/*[in]*/)
{
  VARIANT Value;
  this->AS_DataRequest(ProviderName, Data, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ITest115ServerDispT<T>::AS_GetProviderNames(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_GetProviderNames"), DISPID(20000003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITest115ServerDispT<T>::AS_GetProviderNames(void)
{
  VARIANT Value;
  this->AS_GetProviderNames((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ITest115ServerDispT<T>::AS_GetParams(BSTR ProviderName/*[in]*/, VARIANT* OwnerData/*[in,out]*/, 
                                     VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_GetParams"), DISPID(20000004));
  TAutoArgs<2> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = OwnerData /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITest115ServerDispT<T>::AS_GetParams(BSTR ProviderName/*[in]*/, VARIANT* OwnerData/*[in,out]*/)
{
  VARIANT Value;
  this->AS_GetParams(ProviderName, OwnerData, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ITest115ServerDispT<T>::AS_RowRequest(BSTR ProviderName/*[in]*/, VARIANT Row/*[in]*/, 
                                      long RequestType/*[in]*/, VARIANT* OwnerData/*[in,out]*/, 
                                      VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_RowRequest"), DISPID(20000005));
  TAutoArgs<4> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = Row /*[VT_VARIANT:0]*/;
  _args[3] = RequestType /*[VT_I4:0]*/;
  _args[4] = OwnerData /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITest115ServerDispT<T>::AS_RowRequest(BSTR ProviderName/*[in]*/, VARIANT Row/*[in]*/, 
                                      long RequestType/*[in]*/, VARIANT* OwnerData/*[in,out]*/)
{
  VARIANT Value;
  this->AS_RowRequest(ProviderName, Row, RequestType, OwnerData, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ITest115ServerDispT<T>::AS_Execute(BSTR ProviderName/*[in]*/, BSTR CommandText/*[in]*/, 
                                   VARIANT* Params/*[in,out]*/, VARIANT* OwnerData/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_Execute"), DISPID(20000006));
  TAutoArgs<4> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = CommandText /*[VT_BSTR:0]*/;
  _args[3] = Params /*[VT_VARIANT:1]*/;
  _args[4] = OwnerData /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Test115Server
// Interface: TCOMITest115Server
// *********************************************************************//
typedef TCoClassCreatorT<TCOMITest115Server, ITest115Server, &CLSID_Test115Server, &IID_ITest115Server> CoTest115Server;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Project11_5_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Project11_5_tlb;
#endif

#pragma option pop

#endif // Project11_5_TLBH
