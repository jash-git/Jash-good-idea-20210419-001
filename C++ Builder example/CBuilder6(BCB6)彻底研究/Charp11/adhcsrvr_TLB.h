// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2002/6/2 ¤U¤È 11:43:06 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Paul\CBuilder6\Example\Charp11\Project11_5.tlb (1)
// LIBID: {92B6271B-ECFD-4A70-A099-0D0657E88BA9}
// LCID: 0
// Helpfile: 
// HelpString: adhcsrvr Library
// DepndLst: 
//   (1) v1.0 Midas, (C:\WINNT\System32\midas.dll)
//   (2) v4.0 StdVCL, (C:\WINNT\System32\STDVCL40.DLL)
//   (3) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
// ************************************************************************ //
#ifndef   adhcsrvr_TLBH
#define   adhcsrvr_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include "databkr.hpp"

using Midas::IAppServer;

// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Adhcsrvr_tlb
{

// *********************************************************************//
// HelpString: adhcsrvr Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_adhcsrvr = {0x92B6271B, 0xECFD, 0x4A70,{ 0xA0, 0x99, 0x0D,0x06, 0x57, 0xE8,0x8B, 0xA9} };
extern "C" const __declspec(selectany) GUID IID_IAdHcDM = {0x26599D5F, 0x5816, 0x4763,{ 0x94, 0x93, 0xB4,0x02, 0xAE, 0x4E,0xFD, 0x66} };
extern "C" const __declspec(selectany) GUID CLSID_AdHcDM = {0x87D87307, 0x1013, 0x476B,{ 0x85, 0x3C, 0xE0,0x5D, 0x49, 0x1D,0xC7, 0x9E} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{26599D5F-5816-4763-9493-B402AE4EFD66}") IAdHcDM;
typedef TComInterface<IAdHcDM, &IID_IAdHcDM> IAdHcDMPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//

#define LIBID_OF_AdHcDM (&LIBID_adhcsrvr)
// *********************************************************************//
// Interface: IAdHcDM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {26599D5F-5816-4763-9493-B402AE4EFD66}
// *********************************************************************//
interface IAdHcDM  : public IAppServer
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetDBNames(BSTR* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE GetTableNames(BSTR sAlias/*[in]*/, 
                                                  IStrings** TableNames/*[in,out]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE SetTable(BSTR DB/*[in]*/, BSTR Table/*[in]*/) = 0; // [3]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall GetDBNames(void)
  {
    BSTR Value = 0;
    OLECHECK(this->GetDBNames((BSTR*)&Value));
    return Value;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIAdHcDM
// Interface: IAdHcDM
// *********************************************************************//
template <class T /* IAdHcDM */ >
class TCOMIAdHcDMT : public TComInterface<IAdHcDM>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIAdHcDMT() {}
  TCOMIAdHcDMT(IAdHcDM *intf, bool addRef = false) : TComInterface<IAdHcDM>(intf, addRef) {}
  TCOMIAdHcDMT(const TCOMIAdHcDMT& src) : TComInterface<IAdHcDM>(src) {}
  TCOMIAdHcDMT& operator=(const TCOMIAdHcDMT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall GetDBNames(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall GetDBNames(void);
  HRESULT         __fastcall GetTableNames(BSTR sAlias/*[in]*/, IStrings** TableNames/*[in,out]*/);
  HRESULT         __fastcall SetTable(BSTR DB/*[in]*/, BSTR Table/*[in]*/);

};
typedef TCOMIAdHcDMT<IAdHcDM> TCOMIAdHcDM;

// *********************************************************************//
// DispIntf:  IAdHcDM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {26599D5F-5816-4763-9493-B402AE4EFD66}
// *********************************************************************//
template<class T>
class IAdHcDMDispT : public TAutoDriver<IAdHcDM>
{
public:
  IAdHcDMDispT(){}

  IAdHcDMDispT(IAdHcDM *pintf)
  {
    TAutoDriver<IAdHcDM>::Bind(pintf, false);
  }

  IAdHcDMDispT(IAdHcDMPtr pintf)
  {
    TAutoDriver<IAdHcDM>::Bind(pintf, true);
  }

  IAdHcDMDispT& operator=(IAdHcDM *pintf)
  {
    TAutoDriver<IAdHcDM>::Bind(pintf, false);
    return *this;
  }

  IAdHcDMDispT& operator=(IAdHcDMPtr pintf)
  {
    TAutoDriver<IAdHcDM>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AdHcDM));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AdHcDM);
  }

  HRESULT         __fastcall GetDBNames(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall GetDBNames(void);
  HRESULT         __fastcall GetTableNames(BSTR sAlias/*[in]*/, IStrings** TableNames/*[in,out]*/);
  HRESULT         __fastcall SetTable(BSTR DB/*[in]*/, BSTR Table/*[in]*/);
  HRESULT         __fastcall AS_ApplyUpdates(BSTR ProviderName/*[in]*/, VARIANT Delta/*[in]*/, 
                                             long MaxErrors/*[in]*/, long* ErrorCount/*[out]*/, 
                                             VARIANT* OwnerData/*[in,out]*/, 
                                             VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_ApplyUpdates(BSTR ProviderName/*[in]*/, VARIANT Delta/*[in]*/, 
                                             long MaxErrors/*[in]*/, long* ErrorCount/*[out]*/, 
                                             VARIANT* OwnerData/*[in,out]*/);
  HRESULT         __fastcall AS_GetRecords(BSTR ProviderName/*[in]*/, long Count/*[in]*/, 
                                           long* RecsOut/*[out]*/, long Options/*[in]*/, 
                                           BSTR CommandText/*[in]*/, VARIANT* Params/*[in,out]*/, 
                                           VARIANT* OwnerData/*[in,out]*/, 
                                           VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_GetRecords(BSTR ProviderName/*[in]*/, long Count/*[in]*/, 
                                           long* RecsOut/*[out]*/, long Options/*[in]*/, 
                                           BSTR CommandText/*[in]*/, VARIANT* Params/*[in,out]*/, 
                                           VARIANT* OwnerData/*[in,out]*/);
  HRESULT         __fastcall AS_DataRequest(BSTR ProviderName/*[in]*/, VARIANT Data/*[in]*/, 
                                            VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_DataRequest(BSTR ProviderName/*[in]*/, VARIANT Data/*[in]*/);
  HRESULT         __fastcall AS_GetProviderNames(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_GetProviderNames(void);
  HRESULT         __fastcall AS_GetParams(BSTR ProviderName/*[in]*/, VARIANT* OwnerData/*[in,out]*/
                                          , VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_GetParams(BSTR ProviderName/*[in]*/, VARIANT* OwnerData/*[in,out]*/);
  HRESULT         __fastcall AS_RowRequest(BSTR ProviderName/*[in]*/, VARIANT Row/*[in]*/, 
                                           long RequestType/*[in]*/, VARIANT* OwnerData/*[in,out]*/
                                           , VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall AS_RowRequest(BSTR ProviderName/*[in]*/, VARIANT Row/*[in]*/, 
                                           long RequestType/*[in]*/, VARIANT* OwnerData/*[in,out]*/);
  HRESULT         __fastcall AS_Execute(BSTR ProviderName/*[in]*/, BSTR CommandText/*[in]*/, 
                                        VARIANT* Params/*[in,out]*/, VARIANT* OwnerData/*[in,out]*/);


};
typedef IAdHcDMDispT<IAdHcDM> IAdHcDMDisp;

// *********************************************************************//
// SmartIntf: TCOMIAdHcDM
// Interface: IAdHcDM
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIAdHcDMT<T>::GetDBNames(BSTR* Value/*[out,retval]*/)
{
  return (*this)->GetDBNames(Value);
}

template <class T> BSTR __fastcall
TCOMIAdHcDMT<T>::GetDBNames(void)
{
  BSTR Value = 0;
  OLECHECK(this->GetDBNames((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIAdHcDMT<T>::GetTableNames(BSTR sAlias/*[in]*/, IStrings** TableNames/*[in,out]*/)
{
  return (*this)->GetTableNames(sAlias, TableNames);
}

template <class T> HRESULT __fastcall
TCOMIAdHcDMT<T>::SetTable(BSTR DB/*[in]*/, BSTR Table/*[in]*/)
{
  return (*this)->SetTable(DB, Table);
}

// *********************************************************************//
// DispIntf:  IAdHcDM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {26599D5F-5816-4763-9493-B402AE4EFD66}
// *********************************************************************//
template <class T> HRESULT __fastcall
IAdHcDMDispT<T>::GetDBNames(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDBNames"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IAdHcDMDispT<T>::GetDBNames(void)
{
  BSTR Value;
  this->GetDBNames((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IAdHcDMDispT<T>::GetTableNames(BSTR sAlias/*[in]*/, IStrings** TableNames/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetTableNames"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = sAlias /*[VT_BSTR:0]*/;
  _args[2] = (LPDISPATCH*)(IStrings**)TableNames /*[VT_USERDEFINED:2]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAdHcDMDispT<T>::SetTable(BSTR DB/*[in]*/, BSTR Table/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTable"), DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = DB /*[VT_BSTR:0]*/;
  _args[2] = Table /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAdHcDMDispT<T>::AS_ApplyUpdates(BSTR ProviderName/*[in]*/, VARIANT Delta/*[in]*/, 
                                 long MaxErrors/*[in]*/, long* ErrorCount/*[out]*/, 
                                 VARIANT* OwnerData/*[in,out]*/, VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_ApplyUpdates"), DISPID(20000000));
  TAutoArgs<5> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = Delta /*[VT_VARIANT:0]*/;
  _args[3] = MaxErrors /*[VT_I4:0]*/;
  _args[4] = ErrorCount /*[VT_I4:1]*/;
  _args[5] = OwnerData /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAdHcDMDispT<T>::AS_ApplyUpdates(BSTR ProviderName/*[in]*/, VARIANT Delta/*[in]*/, 
                                 long MaxErrors/*[in]*/, long* ErrorCount/*[out]*/, 
                                 VARIANT* OwnerData/*[in,out]*/)
{
  VARIANT Value;
  this->AS_ApplyUpdates(ProviderName, Delta, MaxErrors, ErrorCount, OwnerData, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IAdHcDMDispT<T>::AS_GetRecords(BSTR ProviderName/*[in]*/, long Count/*[in]*/, long* RecsOut/*[out]*/
                               , long Options/*[in]*/, BSTR CommandText/*[in]*/, 
                               VARIANT* Params/*[in,out]*/, VARIANT* OwnerData/*[in,out]*/, 
                               VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_GetRecords"), DISPID(20000001));
  TAutoArgs<7> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = Count /*[VT_I4:0]*/;
  _args[3] = RecsOut /*[VT_I4:1]*/;
  _args[4] = Options /*[VT_I4:0]*/;
  _args[5] = CommandText /*[VT_BSTR:0]*/;
  _args[6] = Params /*[VT_VARIANT:1]*/;
  _args[7] = OwnerData /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAdHcDMDispT<T>::AS_GetRecords(BSTR ProviderName/*[in]*/, long Count/*[in]*/, long* RecsOut/*[out]*/, 
                               long Options/*[in]*/, BSTR CommandText/*[in]*/, 
                               VARIANT* Params/*[in,out]*/, VARIANT* OwnerData/*[in,out]*/)
{
  VARIANT Value;
  this->AS_GetRecords(ProviderName, Count, RecsOut, Options, CommandText, Params, OwnerData, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IAdHcDMDispT<T>::AS_DataRequest(BSTR ProviderName/*[in]*/, VARIANT Data/*[in]*/, 
                                VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_DataRequest"), DISPID(20000002));
  TAutoArgs<2> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = Data /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAdHcDMDispT<T>::AS_DataRequest(BSTR ProviderName/*[in]*/, VARIANT Data/*[in]*/)
{
  VARIANT Value;
  this->AS_DataRequest(ProviderName, Data, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IAdHcDMDispT<T>::AS_GetProviderNames(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_GetProviderNames"), DISPID(20000003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAdHcDMDispT<T>::AS_GetProviderNames(void)
{
  VARIANT Value;
  this->AS_GetProviderNames((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IAdHcDMDispT<T>::AS_GetParams(BSTR ProviderName/*[in]*/, VARIANT* OwnerData/*[in,out]*/, 
                              VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_GetParams"), DISPID(20000004));
  TAutoArgs<2> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = OwnerData /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAdHcDMDispT<T>::AS_GetParams(BSTR ProviderName/*[in]*/, VARIANT* OwnerData/*[in,out]*/)
{
  VARIANT Value;
  this->AS_GetParams(ProviderName, OwnerData, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IAdHcDMDispT<T>::AS_RowRequest(BSTR ProviderName/*[in]*/, VARIANT Row/*[in]*/, 
                               long RequestType/*[in]*/, VARIANT* OwnerData/*[in,out]*/, 
                               VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_RowRequest"), DISPID(20000005));
  TAutoArgs<4> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = Row /*[VT_VARIANT:0]*/;
  _args[3] = RequestType /*[VT_I4:0]*/;
  _args[4] = OwnerData /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAdHcDMDispT<T>::AS_RowRequest(BSTR ProviderName/*[in]*/, VARIANT Row/*[in]*/, 
                               long RequestType/*[in]*/, VARIANT* OwnerData/*[in,out]*/)
{
  VARIANT Value;
  this->AS_RowRequest(ProviderName, Row, RequestType, OwnerData, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IAdHcDMDispT<T>::AS_Execute(BSTR ProviderName/*[in]*/, BSTR CommandText/*[in]*/, 
                            VARIANT* Params/*[in,out]*/, VARIANT* OwnerData/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("AS_Execute"), DISPID(20000006));
  TAutoArgs<4> _args;
  _args[1] = ProviderName /*[VT_BSTR:0]*/;
  _args[2] = CommandText /*[VT_BSTR:0]*/;
  _args[3] = Params /*[VT_VARIANT:1]*/;
  _args[4] = OwnerData /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : AdHcDM
// Interface: TCOMIAdHcDM
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIAdHcDM, IAdHcDM, &CLSID_AdHcDM, &IID_IAdHcDM> CoAdHcDM;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Adhcsrvr_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Adhcsrvr_tlb;
#endif

#pragma option pop

#endif // adhcsrvr_TLBH
