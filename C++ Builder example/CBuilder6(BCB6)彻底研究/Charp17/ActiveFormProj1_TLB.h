// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2002-11-22 12:51:02 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\CBuilder6Example\Charp17\ActiveFormProj1.tlb (1)
// LIBID: {5C1D3569-9536-4410-AF41-7A3329834DC3}
// LCID: 0
// Helpfile: 
// HelpString: ActiveFormProj1 Library
// DepndLst: 
//   (1) v2.0 stdole, (D:\WINNT\System32\stdole2.tlb)
// ************************************************************************ //
#ifndef   ActiveFormProj1_TLBH
#define   ActiveFormProj1_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Activeformproj1_tlb
{

// *********************************************************************//
// HelpString: ActiveFormProj1 Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_ActiveFormProj1 = {0x5C1D3569, 0x9536, 0x4410,{ 0xAF, 0x41, 0x7A,0x33, 0x29, 0x83,0x4D, 0xC3} };
extern "C" const __declspec(selectany) GUID IID_IActiveFormX = {0x532B74A2, 0x440B, 0x455F,{ 0xA3, 0x0E, 0xD8,0x23, 0x85, 0xED,0x6B, 0x3D} };
extern "C" const __declspec(selectany) GUID DIID_IActiveFormXEvents = {0xE20217F8, 0xBF6E, 0x43BA,{ 0xA6, 0x85, 0xE7,0xF8, 0xF0, 0x91,0x49, 0xE9} };
extern "C" const __declspec(selectany) GUID CLSID_ActiveFormX = {0x0602F79F, 0x65D6, 0x453E,{ 0xA5, 0xD4, 0x55,0x1C, 0xAA, 0x86,0xA3, 0x6F} };
extern "C" const __declspec(selectany) GUID GUID_TxActiveFormBorderStyle = {0x79D3CA68, 0x4912, 0x4504,{ 0xB5, 0x54, 0x19,0x20, 0x39, 0xAD,0xD9, 0xAE} };
extern "C" const __declspec(selectany) GUID GUID_TxPrintScale = {0x2B79297B, 0x78E9, 0x4699,{ 0xA3, 0x63, 0x0D,0xEC, 0x89, 0x9A,0xCB, 0x06} };
extern "C" const __declspec(selectany) GUID GUID_TxMouseButton = {0xB617D341, 0xD589, 0x40E0,{ 0xA7, 0x6F, 0xE7,0xAF, 0x1C, 0x95,0x55, 0x93} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      TxActiveFormBorderStyle;
enum      TxPrintScale;
enum      TxMouseButton;
interface DECLSPEC_UUID("{532B74A2-440B-455F-A30E-D82385ED6B3D}") IActiveFormX;
typedef TComInterface<IActiveFormX, &IID_IActiveFormX> IActiveFormXPtr;

interface DECLSPEC_UUID("{E20217F8-BF6E-43BA-A685-E7F8F09149E9}") IActiveFormXEvents;
typedef TComInterface<IActiveFormXEvents, &DIID_IActiveFormXEvents> IActiveFormXEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IActiveFormX ActiveFormX;
typedef IActiveFormXPtr ActiveFormXPtr;

#define LIBID_OF_ActiveFormX (&LIBID_ActiveFormProj1)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum TxActiveFormBorderStyle
{
  afbNone = 0, 
  afbSingle = 1, 
  afbSunken = 2, 
  afbRaised = 3
} TxActiveFormBorderStyle;

typedef enum TxPrintScale
{
  poNone = 0, 
  poProportional = 1, 
  poPrintToFit = 2
} TxPrintScale;

typedef enum TxMouseButton
{
  mbLeft = 0, 
  mbRight = 1, 
  mbMiddle = 2
} TxMouseButton;

// *********************************************************************//
// Interface: IActiveFormX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {532B74A2-440B-455F-A30E-D82385ED6B3D}
// *********************************************************************//
interface IActiveFormX  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_AutoScroll(VARIANT_BOOL Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_AxBorderStyle(Activeformproj1_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_AxBorderStyle(Activeformproj1_tlb::TxActiveFormBorderStyle Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(long* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(long Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Value/*[out,retval]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Value/*[in]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE get_Color(::OLE_COLOR* Value/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_Color(::OLE_COLOR Value/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp** Value/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_Font(IFontDisp* Value/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Value/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_KeyPreview(VARIANT_BOOL Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_PixelsPerInch(long* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_PixelsPerInch(long Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_PrintScale(Activeformproj1_tlb::TxPrintScale* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_PrintScale(Activeformproj1_tlb::TxPrintScale Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_Scaled(VARIANT_BOOL Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_Active(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_DropTarget(VARIANT_BOOL Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_HelpFile(BSTR* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_HelpFile(BSTR Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_VisibleDockClientCount(long* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Value/*[in]*/) = 0; // [-514]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AutoScroll(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AutoScroll((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AutoSize(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&Value));
    return Value;
  }

  Activeformproj1_tlb::TxActiveFormBorderStyle __fastcall get_AxBorderStyle(void)
  {
    Activeformproj1_tlb::TxActiveFormBorderStyle Value;
    OLECHECK(this->get_AxBorderStyle((Activeformproj1_tlb::TxActiveFormBorderStyle*)&Value));
    return Value;
  }

  long __fastcall get_BorderWidth(void)
  {
    long Value;
    OLECHECK(this->get_BorderWidth((long*)&Value));
    return Value;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Caption((BSTR*)&Value));
    return Value;
  }

  ::OLE_COLOR __fastcall get_Color(void)
  {
    ::OLE_COLOR Value;
    OLECHECK(this->get_Color((::OLE_COLOR*)&Value));
    return Value;
  }

  IFontDisp* __fastcall get_Font(void)
  {
    IFontDisp* Value;
    OLECHECK(this->get_Font((IFontDisp**)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_KeyPreview(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_KeyPreview((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_PixelsPerInch(void)
  {
    long Value;
    OLECHECK(this->get_PixelsPerInch((long*)&Value));
    return Value;
  }

  Activeformproj1_tlb::TxPrintScale __fastcall get_PrintScale(void)
  {
    Activeformproj1_tlb::TxPrintScale Value;
    OLECHECK(this->get_PrintScale((Activeformproj1_tlb::TxPrintScale*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Scaled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Scaled((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Active(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_DropTarget(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_DropTarget((VARIANT_BOOL*)&Value));
    return Value;
  }

  BSTR __fastcall get_HelpFile(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_HelpFile((BSTR*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_DoubleBuffered(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_DoubleBuffered((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AlignDisabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AlignDisabled((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_VisibleDockClientCount(void)
  {
    long Value;
    OLECHECK(this->get_VisibleDockClientCount((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
    return Value;
  }


  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Activeformproj1_tlb::TxActiveFormBorderStyle AxBorderStyle = {read = get_AxBorderStyle, write = set_AxBorderStyle};
  __property   long            BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   BSTR            Caption = {read = get_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   long            PixelsPerInch = {read = get_PixelsPerInch, write = set_PixelsPerInch};
  __property   Activeformproj1_tlb::TxPrintScale PrintScale = {read = get_PrintScale, write = set_PrintScale};
  __property   VARIANT_BOOL    Scaled = {read = get_Scaled, write = set_Scaled};
  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   VARIANT_BOOL    DropTarget = {read = get_DropTarget, write = set_DropTarget};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   VARIANT_BOOL    DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   VARIANT_BOOL    AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IActiveFormXEvents
// Flags:     (4096) Dispatchable
// GUID:      {E20217F8-BF6E-43BA-A685-E7F8F09149E9}
// *********************************************************************//
interface IActiveFormXEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnActivate()
  {
    _TDispID _dispid(/* OnActivate */ DISPID(1));
    OleProcedure(_dispid);
  }

  void __fastcall OnClick()
  {
    _TDispID _dispid(/* OnClick */ DISPID(2));
    OleProcedure(_dispid);
  }

  void __fastcall OnCreate()
  {
    _TDispID _dispid(/* OnCreate */ DISPID(3));
    OleProcedure(_dispid);
  }

  void __fastcall OnDblClick()
  {
    _TDispID _dispid(/* OnDblClick */ DISPID(5));
    OleProcedure(_dispid);
  }

  void __fastcall OnDestroy()
  {
    _TDispID _dispid(/* OnDestroy */ DISPID(6));
    OleProcedure(_dispid);
  }

  void __fastcall OnDeactivate()
  {
    _TDispID _dispid(/* OnDeactivate */ DISPID(7));
    OleProcedure(_dispid);
  }

  void __fastcall OnKeyPress(short* Key/*[in,out]*/)
  {
    _TDispID _dispid(/* OnKeyPress */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Key /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnPaint()
  {
    _TDispID _dispid(/* OnPaint */ DISPID(16));
    OleProcedure(_dispid);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIActiveFormX
// Interface: IActiveFormX
// *********************************************************************//
template <class T /* IActiveFormX */ >
class TCOMIActiveFormXT : public TComInterface<IActiveFormX>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIActiveFormXT() {}
  TCOMIActiveFormXT(IActiveFormX *intf, bool addRef = false) : TComInterface<IActiveFormX>(intf, addRef) {}
  TCOMIActiveFormXT(const TCOMIActiveFormXT& src) : TComInterface<IActiveFormX>(src) {}
  TCOMIActiveFormXT& operator=(const TCOMIActiveFormXT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Visible(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AutoScroll(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_AutoScroll(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AutoSize(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_AutoSize(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AxBorderStyle(Activeformproj1_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/);
  Activeformproj1_tlb::TxActiveFormBorderStyle __fastcall get_AxBorderStyle(void);
  HRESULT         __fastcall set_AxBorderStyle(Activeformproj1_tlb::TxActiveFormBorderStyle Value/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Color(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Value/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDisp* Value/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Value/*[in]*/);
  HRESULT         __fastcall get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_KeyPreview(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_KeyPreview(void);
  HRESULT         __fastcall set_KeyPreview(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_KeyPreview(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_PixelsPerInch(long* Value/*[out,retval]*/);
  long            __fastcall get_PixelsPerInch(void);
  HRESULT         __fastcall set_PixelsPerInch(long Value/*[in]*/);
  HRESULT         __fastcall get_PrintScale(Activeformproj1_tlb::TxPrintScale* Value/*[out,retval]*/);
  Activeformproj1_tlb::TxPrintScale __fastcall get_PrintScale(void);
  HRESULT         __fastcall set_PrintScale(Activeformproj1_tlb::TxPrintScale Value/*[in]*/);
  HRESULT         __fastcall get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Scaled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Scaled(void);
  HRESULT         __fastcall set_Scaled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Scaled(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Active(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Active(void);
  HRESULT         __fastcall get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_DropTarget(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DropTarget(void);
  HRESULT         __fastcall set_DropTarget(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_DropTarget(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_HelpFile(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT         __fastcall set_HelpFile(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_DoubleBuffered(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DoubleBuffered(void);
  HRESULT         __fastcall set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_DoubleBuffered(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AlignDisabled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AlignDisabled(void);
  HRESULT         __fastcall get_VisibleDockClientCount(long* Value/*[out,retval]*/);
  long            __fastcall get_VisibleDockClientCount(void);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL Value/*[in]*/);

  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   TOLEBOOL        AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Activeformproj1_tlb::TxActiveFormBorderStyle AxBorderStyle = {read = get_AxBorderStyle, write = set_AxBorderStyle};
  __property   long            BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   BSTR            Caption = {read = get_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   IFontDisp*      Font = {read = get_Font};
  __property   TOLEBOOL        KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   long            PixelsPerInch = {read = get_PixelsPerInch, write = set_PixelsPerInch};
  __property   Activeformproj1_tlb::TxPrintScale PrintScale = {read = get_PrintScale, write = set_PrintScale};
  __property   TOLEBOOL        Scaled = {read = get_Scaled, write = set_Scaled};
  __property   TOLEBOOL        Active = {read = get_Active};
  __property   TOLEBOOL        DropTarget = {read = get_DropTarget, write = set_DropTarget};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   TOLEBOOL        DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   TOLEBOOL        AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
};
typedef TCOMIActiveFormXT<IActiveFormX> TCOMIActiveFormX;

// *********************************************************************//
// DispIntf:  IActiveFormX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {532B74A2-440B-455F-A30E-D82385ED6B3D}
// *********************************************************************//
template<class T>
class IActiveFormXDispT : public TAutoDriver<IActiveFormX>
{
public:
  IActiveFormXDispT(){}

  IActiveFormXDispT(IActiveFormX *pintf)
  {
    TAutoDriver<IActiveFormX>::Bind(pintf, false);
  }

  IActiveFormXDispT(IActiveFormXPtr pintf)
  {
    TAutoDriver<IActiveFormX>::Bind(pintf, true);
  }

  IActiveFormXDispT& operator=(IActiveFormX *pintf)
  {
    TAutoDriver<IActiveFormX>::Bind(pintf, false);
    return *this;
  }

  IActiveFormXDispT& operator=(IActiveFormXPtr pintf)
  {
    TAutoDriver<IActiveFormX>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ActiveFormX));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ActiveFormX);
  }

  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AxBorderStyle(Activeformproj1_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/);
  Activeformproj1_tlb::TxActiveFormBorderStyle __fastcall get_AxBorderStyle(void);
  HRESULT         __fastcall set_AxBorderStyle(Activeformproj1_tlb::TxActiveFormBorderStyle Value/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Color(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Value/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDisp* Value/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Value/*[in]*/);
  HRESULT         __fastcall get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_KeyPreview(void);
  HRESULT         __fastcall set_KeyPreview(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_PixelsPerInch(long* Value/*[out,retval]*/);
  long            __fastcall get_PixelsPerInch(void);
  HRESULT         __fastcall set_PixelsPerInch(long Value/*[in]*/);
  HRESULT         __fastcall get_PrintScale(Activeformproj1_tlb::TxPrintScale* Value/*[out,retval]*/);
  Activeformproj1_tlb::TxPrintScale __fastcall get_PrintScale(void);
  HRESULT         __fastcall set_PrintScale(Activeformproj1_tlb::TxPrintScale Value/*[in]*/);
  HRESULT         __fastcall get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Scaled(void);
  HRESULT         __fastcall set_Scaled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DropTarget(void);
  HRESULT         __fastcall set_DropTarget(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_HelpFile(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT         __fastcall set_HelpFile(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DoubleBuffered(void);
  HRESULT         __fastcall set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AlignDisabled(void);
  HRESULT         __fastcall get_VisibleDockClientCount(long* Value/*[out,retval]*/);
  long            __fastcall get_VisibleDockClientCount(void);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);

  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Activeformproj1_tlb::TxActiveFormBorderStyle AxBorderStyle = {read = get_AxBorderStyle, write = set_AxBorderStyle};
  __property   long            BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   BSTR            Caption = {read = get_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   long            PixelsPerInch = {read = get_PixelsPerInch, write = set_PixelsPerInch};
  __property   Activeformproj1_tlb::TxPrintScale PrintScale = {read = get_PrintScale, write = set_PrintScale};
  __property   VARIANT_BOOL    Scaled = {read = get_Scaled, write = set_Scaled};
  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   VARIANT_BOOL    DropTarget = {read = get_DropTarget, write = set_DropTarget};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   VARIANT_BOOL    DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   VARIANT_BOOL    AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
};
typedef IActiveFormXDispT<IActiveFormX> IActiveFormXDisp;

// *********************************************************************//
// DispIntf:  IActiveFormXEvents
// Flags:     (4096) Dispatchable
// GUID:      {E20217F8-BF6E-43BA-A685-E7F8F09149E9}
// *********************************************************************//
template <class T>
class IActiveFormXEventsDispT : public TAutoDriver<IActiveFormXEvents>
{
public:
  IActiveFormXEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnActivate();
  void            __fastcall OnClick();
  void            __fastcall OnCreate();
  void            __fastcall OnDblClick();
  void            __fastcall OnDestroy();
  void            __fastcall OnDeactivate();
  void            __fastcall OnKeyPress(short* Key/*[in,out]*/);
  void            __fastcall OnPaint();

};
typedef IActiveFormXEventsDispT<IActiveFormXEvents> IActiveFormXEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIActiveFormX
// Interface: IActiveFormX
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_Visible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Visible(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_Visible(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Visible(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIActiveFormXT<T>::get_Visible(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_Visible(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Visible(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_Visible(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Visible(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoScroll(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_AutoScroll(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoScroll(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIActiveFormXT<T>::get_AutoScroll(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AutoScroll((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_AutoScroll(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_AutoScroll(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_AutoScroll(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_AutoScroll(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoSize(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_AutoSize(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoSize(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIActiveFormXT<T>::get_AutoSize(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_AutoSize(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_AutoSize(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_AutoSize(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_AutoSize(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_AxBorderStyle(Activeformproj1_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/)
{
  return (*this)->get_AxBorderStyle(Value);
}

template <class T> Activeformproj1_tlb::TxActiveFormBorderStyle __fastcall
TCOMIActiveFormXT<T>::get_AxBorderStyle(void)
{
  Activeformproj1_tlb::TxActiveFormBorderStyle Value;
  OLECHECK(this->get_AxBorderStyle((Activeformproj1_tlb::TxActiveFormBorderStyle*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_AxBorderStyle(Activeformproj1_tlb::TxActiveFormBorderStyle Value/*[in]*/)
{
  return (*this)->set_AxBorderStyle(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_BorderWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(Value);
}

template <class T> long __fastcall
TCOMIActiveFormXT<T>::get_BorderWidth(void)
{
  long Value;
  OLECHECK(this->get_BorderWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_BorderWidth(long Value/*[in]*/)
{
  return (*this)->set_BorderWidth(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_Caption(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Caption(Value);
}

template <class T> BSTR __fastcall
TCOMIActiveFormXT<T>::get_Caption(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Caption((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_Caption(BSTR Value/*[in]*/)
{
  return (*this)->set_Caption(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_Color(::OLE_COLOR* Value/*[out,retval]*/)
{
  return (*this)->get_Color(Value);
}

template <class T> ::OLE_COLOR __fastcall
TCOMIActiveFormXT<T>::get_Color(void)
{
  ::OLE_COLOR Value;
  OLECHECK(this->get_Color((::OLE_COLOR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_Color(::OLE_COLOR Value/*[in]*/)
{
  return (*this)->set_Color(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_Font(IFontDisp** Value/*[out,retval]*/)
{
  return (*this)->get_Font(Value);
}

template <class T> IFontDisp* __fastcall
TCOMIActiveFormXT<T>::get_Font(void)
{
  IFontDisp* Value;
  OLECHECK(this->get_Font((IFontDisp**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_Font(IFontDisp* Value/*[in]*/)
{
  return (*this)->set_Font(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::_set_Font(IFontDisp** Value/*[in]*/)
{
  return (*this)->_set_Font(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_KeyPreview(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_KeyPreview(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_KeyPreview(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIActiveFormXT<T>::get_KeyPreview(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_KeyPreview((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_KeyPreview(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_KeyPreview(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_KeyPreview(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_KeyPreview(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_PixelsPerInch(long* Value/*[out,retval]*/)
{
  return (*this)->get_PixelsPerInch(Value);
}

template <class T> long __fastcall
TCOMIActiveFormXT<T>::get_PixelsPerInch(void)
{
  long Value;
  OLECHECK(this->get_PixelsPerInch((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_PixelsPerInch(long Value/*[in]*/)
{
  return (*this)->set_PixelsPerInch(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_PrintScale(Activeformproj1_tlb::TxPrintScale* Value/*[out,retval]*/)
{
  return (*this)->get_PrintScale(Value);
}

template <class T> Activeformproj1_tlb::TxPrintScale __fastcall
TCOMIActiveFormXT<T>::get_PrintScale(void)
{
  Activeformproj1_tlb::TxPrintScale Value;
  OLECHECK(this->get_PrintScale((Activeformproj1_tlb::TxPrintScale*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_PrintScale(Activeformproj1_tlb::TxPrintScale Value/*[in]*/)
{
  return (*this)->set_PrintScale(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Scaled(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_Scaled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Scaled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIActiveFormXT<T>::get_Scaled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Scaled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_Scaled(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Scaled(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_Scaled(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Scaled(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Active(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_Active(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Active(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIActiveFormXT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DropTarget(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_DropTarget(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DropTarget(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIActiveFormXT<T>::get_DropTarget(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_DropTarget((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_DropTarget(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_DropTarget(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_DropTarget(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_DropTarget(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_HelpFile(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_HelpFile(Value);
}

template <class T> BSTR __fastcall
TCOMIActiveFormXT<T>::get_HelpFile(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_HelpFile((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_HelpFile(BSTR Value/*[in]*/)
{
  return (*this)->set_HelpFile(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DoubleBuffered(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_DoubleBuffered(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DoubleBuffered(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIActiveFormXT<T>::get_DoubleBuffered(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_DoubleBuffered((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_DoubleBuffered(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_DoubleBuffered(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_DoubleBuffered(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AlignDisabled(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_AlignDisabled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AlignDisabled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIActiveFormXT<T>::get_AlignDisabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AlignDisabled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_VisibleDockClientCount(long* Value/*[out,retval]*/)
{
  return (*this)->get_VisibleDockClientCount(Value);
}

template <class T> long __fastcall
TCOMIActiveFormXT<T>::get_VisibleDockClientCount(void)
{
  long Value;
  OLECHECK(this->get_VisibleDockClientCount((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Enabled(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::get_Enabled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIActiveFormXT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Enabled(Value);
}

template <class T> HRESULT __fastcall
TCOMIActiveFormXT<T>::set_Enabled(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)Value);
}

// *********************************************************************//
// DispIntf:  IActiveFormX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {532B74A2-440B-455F-A30E-D82385ED6B3D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_Visible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IActiveFormXDispT<T>::get_Visible(void)
{
  VARIANT_BOOL Value;
  this->get_Visible((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_Visible(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScroll"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IActiveFormXDispT<T>::get_AutoScroll(void)
{
  VARIANT_BOOL Value;
  this->get_AutoScroll((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_AutoScroll(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScroll"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IActiveFormXDispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL Value;
  this->get_AutoSize((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_AutoSize(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_AxBorderStyle(Activeformproj1_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxBorderStyle"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Activeformproj1_tlb::TxActiveFormBorderStyle __fastcall
IActiveFormXDispT<T>::get_AxBorderStyle(void)
{
  Activeformproj1_tlb::TxActiveFormBorderStyle Value;
  this->get_AxBorderStyle((Activeformproj1_tlb::TxActiveFormBorderStyle*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_AxBorderStyle(Activeformproj1_tlb::TxActiveFormBorderStyle Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxBorderStyle"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_BorderWidth(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IActiveFormXDispT<T>::get_BorderWidth(void)
{
  long Value;
  this->get_BorderWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_BorderWidth(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_Caption(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IActiveFormXDispT<T>::get_Caption(void)
{
  BSTR Value;
  this->get_Caption((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_Caption(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_Color(::OLE_COLOR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
IActiveFormXDispT<T>::get_Color(void)
{
  ::OLE_COLOR Value;
  this->get_Color((::OLE_COLOR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_Color(::OLE_COLOR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_Font(IFontDisp** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp* __fastcall
IActiveFormXDispT<T>::get_Font(void)
{
  IFontDisp* Value;
  this->get_Font((IFontDisp**)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_Font(IFontDisp* Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp*)Value /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::_set_Font(IFontDisp** Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH*)(IFontDisp**)Value /*[VT_USERDEFINED:2]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyPreview"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IActiveFormXDispT<T>::get_KeyPreview(void)
{
  VARIANT_BOOL Value;
  this->get_KeyPreview((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_KeyPreview(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyPreview"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_PixelsPerInch(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PixelsPerInch"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IActiveFormXDispT<T>::get_PixelsPerInch(void)
{
  long Value;
  this->get_PixelsPerInch((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_PixelsPerInch(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PixelsPerInch"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_PrintScale(Activeformproj1_tlb::TxPrintScale* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintScale"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Activeformproj1_tlb::TxPrintScale __fastcall
IActiveFormXDispT<T>::get_PrintScale(void)
{
  Activeformproj1_tlb::TxPrintScale Value;
  this->get_PrintScale((Activeformproj1_tlb::TxPrintScale*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_PrintScale(Activeformproj1_tlb::TxPrintScale Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintScale"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaled"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IActiveFormXDispT<T>::get_Scaled(void)
{
  VARIANT_BOOL Value;
  this->get_Scaled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_Scaled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaled"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IActiveFormXDispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropTarget"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IActiveFormXDispT<T>::get_DropTarget(void)
{
  VARIANT_BOOL Value;
  this->get_DropTarget((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_DropTarget(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropTarget"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_HelpFile(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IActiveFormXDispT<T>::get_HelpFile(void)
{
  BSTR Value;
  this->get_HelpFile((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_HelpFile(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleBuffered"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IActiveFormXDispT<T>::get_DoubleBuffered(void)
{
  VARIANT_BOOL Value;
  this->get_DoubleBuffered((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleBuffered"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlignDisabled"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IActiveFormXDispT<T>::get_AlignDisabled(void)
{
  VARIANT_BOOL Value;
  this->get_AlignDisabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_VisibleDockClientCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VisibleDockClientCount"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IActiveFormXDispT<T>::get_VisibleDockClientCount(void)
{
  long Value;
  this->get_VisibleDockClientCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IActiveFormXDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IActiveFormXDispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IActiveFormXEvents
// Flags:     (4096) Dispatchable
// GUID:      {E20217F8-BF6E-43BA-A685-E7F8F09149E9}
// *********************************************************************//
template <class T> void __fastcall
IActiveFormXEventsDispT<T>::OnActivate()
{
  _TDispID _dispid(/* OnActivate */ DISPID(1));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IActiveFormXEventsDispT<T>::OnClick()
{
  _TDispID _dispid(/* OnClick */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IActiveFormXEventsDispT<T>::OnCreate()
{
  _TDispID _dispid(/* OnCreate */ DISPID(3));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IActiveFormXEventsDispT<T>::OnDblClick()
{
  _TDispID _dispid(/* OnDblClick */ DISPID(5));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IActiveFormXEventsDispT<T>::OnDestroy()
{
  _TDispID _dispid(/* OnDestroy */ DISPID(6));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IActiveFormXEventsDispT<T>::OnDeactivate()
{
  _TDispID _dispid(/* OnDeactivate */ DISPID(7));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IActiveFormXEventsDispT<T>::OnKeyPress(short* Key/*[in,out]*/)
{
  _TDispID _dispid(/* OnKeyPress */ DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Key /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IActiveFormXEventsDispT<T>::OnPaint()
{
  _TDispID _dispid(/* OnPaint */ DISPID(16));
  OleProcedure(_dispid);
}

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ActiveFormX
// Event Interface : IActiveFormXEvents
// *********************************************************************//
template <class T>
class TEvents_ActiveFormX : public IConnectionPointImpl<T,
                                                 &DIID_IActiveFormXEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_OnActivate(void);
  void            Fire_OnClick(void);
  void            Fire_OnCreate(void);
  void            Fire_OnDblClick(void);
  void            Fire_OnDestroy(void);
  void            Fire_OnDeactivate(void);
  void            Fire_OnKeyPress(short* Key);
  void            Fire_OnPaint(void);
protected:
  IActiveFormXEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ActiveFormX<T>::Fire_OnActivate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnActivate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveFormX<T>::Fire_OnClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveFormX<T>::Fire_OnCreate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnCreate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveFormX<T>::Fire_OnDblClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveFormX<T>::Fire_OnDestroy(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveFormX<T>::Fire_OnDeactivate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDeactivate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveFormX<T>::Fire_OnKeyPress(short* Key)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyPress(Key);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ActiveFormX<T>::Fire_OnPaint(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnPaint();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Activeformproj1_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Activeformproj1_tlb;
#endif

#pragma option pop

#endif // ActiveFormProj1_TLBH
