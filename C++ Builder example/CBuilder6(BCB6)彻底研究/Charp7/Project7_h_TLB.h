// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2002-11-20 15:15:08 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\CBuilder6Example\Charp7\Project7_h.tlb (1)
// LIBID: {28D69611-27AF-11D4-959B-0080C85400DC}
// LCID: 0
// Helpfile: 
// HelpString: Project1 Library
// DepndLst: 
//   (1) v2.0 stdole, (D:\WINNT\System32\stdole2.tlb)
// ************************************************************************ //
#ifndef   Project7_h_TLBH
#define   Project7_h_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Project7_h_tlb
{

// *********************************************************************//
// HelpString: Project1 Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_Project7_h = {0x28D69611, 0x27AF, 0x11D4,{ 0x95, 0x9B, 0x00,0x80, 0xC8, 0x54,0x00, 0xDC} };
extern "C" const __declspec(selectany) GUID IID_ITmedia_server = {0x28D69612, 0x27AF, 0x11D4,{ 0x95, 0x9B, 0x00,0x80, 0xC8, 0x54,0x00, 0xDC} };
extern "C" const __declspec(selectany) GUID CLSID_Tmedia_server = {0x28D69614, 0x27AF, 0x11D4,{ 0x95, 0x9B, 0x00,0x80, 0xC8, 0x54,0x00, 0xDC} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{28D69612-27AF-11D4-959B-0080C85400DC}") ITmedia_server;
typedef TComInterface<ITmedia_server, &IID_ITmedia_server> ITmedia_serverPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef ITmedia_server Tmedia_server;
typedef ITmedia_serverPtr Tmedia_serverPtr;

#define LIBID_OF_Tmedia_server (&LIBID_Project7_h)
// *********************************************************************//
// Interface: ITmedia_server
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {28D69612-27AF-11D4-959B-0080C85400DC}
// *********************************************************************//
interface ITmedia_server  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_FileStr(VARIANT* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_FileStr(VARIANT Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE OpenFile(void) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE PlayFile(void) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE StopFile(void) = 0; // [4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_FileStr(void)
  {
    VARIANT Value;
    OLECHECK(this->get_FileStr((VARIANT*)&Value));
    return Value;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMITmedia_server
// Interface: ITmedia_server
// *********************************************************************//
template <class T /* ITmedia_server */ >
class TCOMITmedia_serverT : public TComInterface<ITmedia_server>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMITmedia_serverT() {}
  TCOMITmedia_serverT(ITmedia_server *intf, bool addRef = false) : TComInterface<ITmedia_server>(intf, addRef) {}
  TCOMITmedia_serverT(const TCOMITmedia_serverT& src) : TComInterface<ITmedia_server>(src) {}
  TCOMITmedia_serverT& operator=(const TCOMITmedia_serverT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_FileStr(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_FileStr(void);
  HRESULT         __fastcall set_FileStr(VARIANT Value/*[in]*/);
  HRESULT         __fastcall OpenFile(void);
  HRESULT         __fastcall PlayFile(void);
  HRESULT         __fastcall StopFile(void);

};
typedef TCOMITmedia_serverT<ITmedia_server> TCOMITmedia_server;

// *********************************************************************//
// DispIntf:  ITmedia_server
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {28D69612-27AF-11D4-959B-0080C85400DC}
// *********************************************************************//
template<class T>
class ITmedia_serverDispT : public TAutoDriver<ITmedia_server>
{
public:
  ITmedia_serverDispT(){}

  ITmedia_serverDispT(ITmedia_server *pintf)
  {
    TAutoDriver<ITmedia_server>::Bind(pintf, false);
  }

  ITmedia_serverDispT(ITmedia_serverPtr pintf)
  {
    TAutoDriver<ITmedia_server>::Bind(pintf, true);
  }

  ITmedia_serverDispT& operator=(ITmedia_server *pintf)
  {
    TAutoDriver<ITmedia_server>::Bind(pintf, false);
    return *this;
  }

  ITmedia_serverDispT& operator=(ITmedia_serverPtr pintf)
  {
    TAutoDriver<ITmedia_server>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Tmedia_server));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Tmedia_server);
  }

  HRESULT         __fastcall get_FileStr(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_FileStr(void);
  HRESULT         __fastcall set_FileStr(VARIANT Value/*[in]*/);
  HRESULT         __fastcall OpenFile();
  HRESULT         __fastcall PlayFile();
  HRESULT         __fastcall StopFile();

};
typedef ITmedia_serverDispT<ITmedia_server> ITmedia_serverDisp;

// *********************************************************************//
// SmartIntf: TCOMITmedia_server
// Interface: ITmedia_server
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMITmedia_serverT<T>::get_FileStr(VARIANT* Value/*[out,retval]*/)
{
  return (*this)->get_FileStr(Value);
}

template <class T> VARIANT __fastcall
TCOMITmedia_serverT<T>::get_FileStr(void)
{
  VARIANT Value;
  OLECHECK(this->get_FileStr((VARIANT*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMITmedia_serverT<T>::set_FileStr(VARIANT Value/*[in]*/)
{
  return (*this)->set_FileStr(Value);
}

template <class T> HRESULT __fastcall
TCOMITmedia_serverT<T>::OpenFile(void)
{
  return (*this)->OpenFile();
}

template <class T> HRESULT __fastcall
TCOMITmedia_serverT<T>::PlayFile(void)
{
  return (*this)->PlayFile();
}

template <class T> HRESULT __fastcall
TCOMITmedia_serverT<T>::StopFile(void)
{
  return (*this)->StopFile();
}

// *********************************************************************//
// DispIntf:  ITmedia_server
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {28D69612-27AF-11D4-959B-0080C85400DC}
// *********************************************************************//
template <class T> HRESULT __fastcall
ITmedia_serverDispT<T>::get_FileStr(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileStr"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITmedia_serverDispT<T>::get_FileStr(void)
{
  VARIANT Value;
  this->get_FileStr((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ITmedia_serverDispT<T>::set_FileStr(VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileStr"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITmedia_serverDispT<T>::OpenFile()
{
  _TDispID _dispid(*this, OLETEXT("OpenFile"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ITmedia_serverDispT<T>::PlayFile()
{
  _TDispID _dispid(*this, OLETEXT("PlayFile"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ITmedia_serverDispT<T>::StopFile()
{
  _TDispID _dispid(*this, OLETEXT("StopFile"), DISPID(4));
  return OleFunction(_dispid);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Tmedia_server
// Interface: TCOMITmedia_server
// *********************************************************************//
typedef TCoClassCreatorT<TCOMITmedia_server, ITmedia_server, &CLSID_Tmedia_server, &IID_ITmedia_server> CoTmedia_server;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Project7_h_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Project7_h_tlb;
#endif

#pragma option pop

#endif // Project7_h_TLBH
